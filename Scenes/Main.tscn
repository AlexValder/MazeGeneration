[gd_scene load_steps=8 format=2]

[ext_resource path="res://Scripts/Main.cs" type="Script" id=1]
[ext_resource path="res://Scenes/GuiScripts/AlgoOptionButton.gd" type="Script" id=2]
[ext_resource path="res://Assets/MeshLibraries/maze.meshlib" type="MeshLibrary" id=6]

[sub_resource type="GDScript" id=5]
script/source = "extends HBoxContainer

onready var _seed := $SeedInput as LineEdit
onready var _algo := $AlgoOptionButton as OptionButton
onready var _w_label := $WidthLabel as Label
onready var _w_spin_box := $WidthSpinBox as SpinBox
onready var _h_label := $HeightLabel as Label
onready var _h_spin_box := $HeightSpinBox as SpinBox
onready var _red := $RedSpinBox as SpinBox
onready var _green := $GreenSpinBox as SpinBox
onready var _blue := $BlueSpinBox as SpinBox
onready var _exit := $ExitCheckBox as CheckBox
onready var _mask := $MaskCheckBox as CheckBox
onready var _main := $\"../\" as Spatial


func _ensure_present(node: Node, name: String) -> void:
    if node == null:
        push_error(\"%s not found\" % [name])
        get_tree().quit()


func _ready() -> void:
    _ensure_present(_seed, \"SeedInput\")
    _ensure_present(_algo, \"AlgoOptionButton\")
    _ensure_present(_w_label, \"WidthLabel\")
    _ensure_present(_w_spin_box, \"WidthSpinBox\")
    _ensure_present(_h_label, \"HeightLabel\")
    _ensure_present(_h_spin_box, \"HeightSpinBox\")
    _ensure_present(_main, \"Main\")
    _ensure_present(_red, \"RedSpinBox\")
    _ensure_present(_green, \"GreenSpinBox\")
    _ensure_present(_blue, \"BlueSpinBox\")
    _ensure_present(_exit, \"ExitCheckBox\")


func _on_Button_button_up() -> void:
    var algo := _algo.get_item_text(_algo.selected)
    var width := _w_spin_box.value as int
    var height := _h_spin_box.value as int
    var color := Color(
        _red.value / 256,
        _green.value / 256,
        _blue.value / 256
    )
    var add_exit := _exit.pressed
    var add_mask := _mask.visible and _mask.pressed
    _main.CreateRooms(width, height, algo, _seed.text, color, add_exit, add_mask)
"

[sub_resource type="ProceduralSky" id=1]
texture_size = 0

[sub_resource type="Environment" id=2]
background_mode = 3
background_sky = SubResource( 1 )

[sub_resource type="GDScript" id=3]
script/source = "extends Camera

const STEP := 0.2
const THRESHOLD := 0.5

onready var _main := $\"../../\"
var screen_size := Vector2.ZERO

func _ready() -> void:
    if _main == null:
        push_error(\"Main not found\")
        get_tree().quit()

    screen_size = OS.window_size
    get_tree().root.connect(\"size_changed\", self, \"_on_viewport_size_changed\")


func _process(delta: float) -> void:
    if not self.current:
        return

    if Input.is_action_just_pressed(\"map_center\"):
        self.transform.origin.x = 0
        self.transform.origin.y = 0
        return

    if Input.is_action_pressed(\"map_left\"):
        self.transform.origin.x -= STEP * Input.get_action_strength(\"map_left\")
    elif Input.is_action_pressed(\"map_right\"):
        self.transform.origin.x += STEP * Input.get_action_strength(\"map_right\")

    if Input.is_action_pressed(\"map_up\"):
        self.transform.origin.y += STEP * Input.get_action_strength(\"map_up\")
    elif Input.is_action_pressed(\"map_down\"):
        self.transform.origin.y -= STEP * Input.get_action_strength(\"map_down\")


func _on_viewport_size_changed() -> void:
    screen_size = OS.window_size
"

[node name="Main" type="Spatial"]
script = ExtResource( 1 )

[node name="Container" type="HBoxContainer" parent="."]
anchor_top = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
margin_top = -50.0
margin_bottom = -25.0
alignment = 1
script = SubResource( 5 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="SeedInput" type="LineEdit" parent="Container"]
margin_right = 100.0
margin_bottom = 25.0
rect_min_size = Vector2( 100, 0 )
align = 1
placeholder_text = "Seed"

[node name="AlgoOptionButton" type="OptionButton" parent="Container"]
margin_left = 104.0
margin_right = 214.0
margin_bottom = 25.0
rect_min_size = Vector2( 110, 24 )
text = "Kruskal"
align = 1
script = ExtResource( 2 )

[node name="vs1" type="VSeparator" parent="Container"]
margin_left = 218.0
margin_right = 222.0
margin_bottom = 25.0

[node name="WidthLabel" type="Label" parent="Container"]
margin_left = 226.0
margin_top = 5.0
margin_right = 264.0
margin_bottom = 19.0
text = "Width"

[node name="WidthSpinBox" type="SpinBox" parent="Container"]
margin_left = 268.0
margin_right = 342.0
margin_bottom = 25.0
min_value = 2.0
max_value = 25.0
value = 2.0
align = 1

[node name="HeightLabel" type="Label" parent="Container"]
margin_left = 346.0
margin_top = 5.0
margin_right = 388.0
margin_bottom = 19.0
text = "Height"

[node name="HeightSpinBox" type="SpinBox" parent="Container"]
margin_left = 392.0
margin_right = 466.0
margin_bottom = 25.0
min_value = 2.0
max_value = 25.0
value = 2.0
align = 1

[node name="vs2" type="VSeparator" parent="Container"]
margin_left = 470.0
margin_right = 474.0
margin_bottom = 25.0

[node name="RedLabel" type="Label" parent="Container"]
margin_left = 478.0
margin_top = 5.0
margin_right = 486.0
margin_bottom = 19.0
text = "R"

[node name="RedSpinBox" type="SpinBox" parent="Container"]
margin_left = 490.0
margin_right = 564.0
margin_bottom = 25.0
min_value = 20.0
max_value = 255.0
value = 20.0
align = 1

[node name="GreenLabel" type="Label" parent="Container"]
margin_left = 568.0
margin_top = 5.0
margin_right = 578.0
margin_bottom = 19.0
text = "G"

[node name="GreenSpinBox" type="SpinBox" parent="Container"]
margin_left = 582.0
margin_right = 656.0
margin_bottom = 25.0
min_value = 20.0
max_value = 255.0
value = 170.0
align = 1

[node name="BlueLabel" type="Label" parent="Container"]
margin_left = 660.0
margin_top = 5.0
margin_right = 669.0
margin_bottom = 19.0
text = "B"

[node name="BlueSpinBox" type="SpinBox" parent="Container"]
margin_left = 673.0
margin_right = 747.0
margin_bottom = 25.0
min_value = 20.0
max_value = 255.0
value = 140.0
align = 1

[node name="vs3" type="VSeparator" parent="Container"]
margin_left = 751.0
margin_right = 755.0
margin_bottom = 25.0

[node name="ExitCheckBox" type="CheckBox" parent="Container"]
margin_left = 759.0
margin_right = 810.0
margin_bottom = 25.0
pressed = true
text = "Exit"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="MaskCheckBox" type="CheckBox" parent="Container"]
margin_left = 814.0
margin_right = 904.0
margin_bottom = 25.0
text = "Use Mask"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="vs4" type="VSeparator" parent="Container"]
margin_left = 908.0
margin_right = 912.0
margin_bottom = 25.0

[node name="Button" type="Button" parent="Container"]
margin_left = 916.0
margin_right = 1035.0
margin_bottom = 25.0
text = "Generate Rooms"

[node name="CamRoot" type="Spatial" parent="."]
transform = Transform( 0.453991, -0.472161, 0.755616, 0, 0.848047, 0.529919, -0.891007, -0.240578, 0.385005, 96, 64, 48 )

[node name="Camera" type="Camera" parent="CamRoot"]
cull_mask = 1
environment = SubResource( 2 )
projection = 1
current = true
size = 20.0
near = 10.0
far = 200.0
script = SubResource( 3 )

[node name="DirectionalLight" type="DirectionalLight" parent="."]
transform = Transform( 0.974894, -0.148516, 0.165908, 0, 0.74508, 0.666975, -0.222671, -0.65023, 0.726374, 0, -8.30488, 0 )

[node name="GridMap" type="GridMap" parent="."]
mesh_library = ExtResource( 6 )
data = {
"cells": PoolIntArray(  )
}
__meta__ = {
"_editor_clip_": 0,
"_editor_floor_": Vector3( 0, 0, 0 )
}

[connection signal="item_selected" from="Container/AlgoOptionButton" to="Container/AlgoOptionButton" method="_on_AlgoOptionButton_item_selected"]
[connection signal="button_up" from="Container/Button" to="Container" method="_on_Button_button_up"]
